{"ast":null,"code":"var _jsxFileName = \"/Users/alexmerrill/Desktop/Middlebury/20-21/SWD/Web Dev/RESTAPI - Film Explorer/src/components/FilmExplorer.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport FilmTableContainer from './FilmTableContainer';\nimport SearchBar from './SearchBar';\n\nfunction FilmExplorer() {\n  const {\n    0: searchTerm,\n    1: setSearchTerm\n  } = useState('');\n  const {\n    0: sortType,\n    1: setSortType\n  } = useState('title');\n  const {\n    0: films,\n    1: setFilms\n  } = useState([]); // load the film data\n\n  useEffect(() => {\n    const getData = async () => {\n      const response = await fetch('/api/films');\n\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      const filmData = await response.json();\n      setFilms(filmData);\n    };\n\n    getData();\n  }, []); // change the rating of a film\n\n  const setRating = async (filmid, rating) => {\n    const oldFilm = films.find(film => film.id === filmid);\n\n    const newFilm = _objectSpread(_objectSpread({}, oldFilm), {}, {\n      rating\n    });\n\n    const response = await fetch(`/api/films/${filmid}`, {\n      method: 'PUT',\n      body: JSON.stringify(newFilm),\n      headers: new Headers({\n        'Content-type': 'application/json'\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    const updatedFilm = await response.json();\n    const alteredFilms = films.map(film => {\n      if (film.id === filmid) {\n        return updatedFilm;\n      }\n\n      return film;\n    });\n    setFilms(alteredFilms);\n  };\n\n  const mainContents = films.size === 0 ? __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"Loading...\") : __jsx(FilmTableContainer, {\n    searchTerm: searchTerm,\n    films: films,\n    sortType: sortType,\n    setRatingFor: setRating,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  });\n  return __jsx(\"div\", {\n    className: \"FilmExplorer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, __jsx(SearchBar, {\n    searchTerm: searchTerm,\n    setTerm: setSearchTerm,\n    sortType: sortType,\n    setType: setSortType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), mainContents);\n}\n\nexport default FilmExplorer;","map":{"version":3,"sources":["/Users/alexmerrill/Desktop/Middlebury/20-21/SWD/Web Dev/RESTAPI - Film Explorer/src/components/FilmExplorer.js"],"names":["React","useState","useEffect","FilmTableContainer","SearchBar","FilmExplorer","searchTerm","setSearchTerm","sortType","setSortType","films","setFilms","getData","response","fetch","ok","Error","statusText","filmData","json","setRating","filmid","rating","oldFilm","find","film","id","newFilm","method","body","JSON","stringify","headers","Headers","updatedFilm","alteredFilms","map","mainContents","size"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport FilmTableContainer from './FilmTableContainer';\nimport SearchBar from './SearchBar';\n\nfunction FilmExplorer() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortType, setSortType] = useState('title');\n  const [films, setFilms] = useState([]);\n\n  // load the film data\n  useEffect(() => {\n    const getData = async () => {\n      const response = await fetch(\n        '/api/films'\n      );\n\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      const filmData = await response.json();\n\n      setFilms(filmData);\n    };\n\n    getData();\n  }, []);\n\n  // change the rating of a film\n  const setRating = async (filmid, rating) => {\n    const oldFilm = films.find((film) => film.id === filmid);\n    const newFilm = { ...oldFilm, rating };\n\n    const response = await fetch(\n      `/api/films/${filmid}`,\n      {\n        method: 'PUT',\n        body: JSON.stringify(newFilm),\n        headers: new Headers({ 'Content-type': 'application/json' }),\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    const updatedFilm = await response.json();\n\n    const alteredFilms = films.map((film) => {\n      if (film.id === filmid) {\n        return updatedFilm;\n      }\n      return film;\n    });\n    setFilms(alteredFilms);\n  };\n\n  const mainContents =\n    films.size === 0 ? (\n      <h2>Loading...</h2>\n    ) : (\n      <FilmTableContainer\n        searchTerm={searchTerm}\n        films={films}\n        sortType={sortType}\n        setRatingFor={setRating}\n      />\n    );\n\n  return (\n    <div className=\"FilmExplorer\">\n      <SearchBar\n        searchTerm={searchTerm}\n        setTerm={setSearchTerm}\n        sortType={sortType}\n        setType={setSortType}\n      />\n      {mainContents}\n    </div>\n  );\n}\n\nexport default FilmExplorer;\n"]},"metadata":{},"sourceType":"module"}