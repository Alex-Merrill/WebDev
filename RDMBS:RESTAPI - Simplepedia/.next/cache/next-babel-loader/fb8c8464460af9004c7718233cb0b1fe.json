{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/alexmerrill/Desktop/Middlebury/20-21/SWD/Practicals/practical-07-Alex-Merrill/src/components/IndexBar.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Sections from '../components/Sections';\nimport Titles from '../components/Titles';\n/*\n  IndexBar.js\n\n  This component provides the section and title display that allows the user to \n  browse the available articles and select one for display. \n*/\n\nexport default function IndexBar(_ref) {\n  _s();\n\n  var select = _ref.select,\n      currentArticle = _ref.currentArticle;\n\n  // create state to keep track of current selected section\n  var _useState = useState(),\n      section = _useState[0],\n      setSection = _useState[1];\n\n  var _useState2 = useState([]),\n      sections = _useState2[0],\n      setSections = _useState2[1];\n\n  var _useState3 = useState([]),\n      titles = _useState3[0],\n      setTitles = _useState3[1]; // watches for currentArticle change to update section displayed\n\n\n  useEffect(function () {\n    if (currentArticle) {\n      setSection(currentArticle.title.charAt(0).toUpperCase());\n    } else if (!currentArticle && titles.length === 1) {\n      setSection();\n    }\n  }, [currentArticle]); // gets list of sections to display\n\n  useEffect(function () {\n    var getSections = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"\".concat(process.env.NEXT_PUBLIC_HOSTNAME, \"api/sections\"));\n\n              case 2:\n                response = _context.sent;\n\n                if (response.ok) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(response.statusText);\n\n              case 5:\n                _context.next = 7;\n                return response.json();\n\n              case 7:\n                data = _context.sent;\n                setSections(data);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getSections() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    getSections();\n  }, [currentArticle]); // gets list of titles to display\n\n  useEffect(function () {\n    var getTitles = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var response, data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return fetch(\"\".concat(process.env.NEXT_PUBLIC_HOSTNAME, \"api/titles/\").concat(section));\n\n              case 2:\n                response = _context2.sent;\n\n                if (response.ok) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error(response.statusText);\n\n              case 5:\n                _context2.next = 7;\n                return response.json();\n\n              case 7:\n                data = _context2.sent;\n                setTitles(data);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function getTitles() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    console.log(\"section: \" + section);\n\n    if (section) {\n      console.log(\"Section: \" + section);\n      getTitles();\n    }\n  }, [section, currentArticle]); // creates Message component to display message if section hasn't been selected.\n\n  var Message = function Message() {\n    return __jsx(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 19\n      }\n    }, \"Please select a section to view articles.\"));\n  }; // defines TitleRegion component based on section state\n\n\n  var TitleRegion = section && sections.includes(section) ? Titles : Message; // callback to Titles component, updates currentArticle when an article is clicked\n\n  var updateArticle = function updateArticle(e) {\n    var getFullArt = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(art) {\n        var response, fullArt;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return fetch(\"\".concat(process.env.NEXT_PUBLIC_HOSTNAME, \"api/articles/\").concat(art.id));\n\n              case 2:\n                response = _context3.sent;\n\n                if (response.ok) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new Error(response.statusText);\n\n              case 5:\n                _context3.next = 7;\n                return response.json();\n\n              case 7:\n                fullArt = _context3.sent;\n                select(fullArt);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function getFullArt(_x) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    getFullArt(e);\n  }; // returns structured DOM\n\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, __jsx(Sections, {\n    sections: sections,\n    setSection: setSection,\n    select: select,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), __jsx(TitleRegion, {\n    articles: titles,\n    updateArticle: updateArticle,\n    section: section,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(IndexBar, \"cdpUrU3vlIAsCNivaSDqS1AUsAQ=\");\n\n_c = IndexBar;\nIndexBar.propTypes = {\n  select: PropTypes.func.isRequired,\n  currentArticle: PropTypes.object\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexBar\");","map":{"version":3,"sources":["/Users/alexmerrill/Desktop/Middlebury/20-21/SWD/Practicals/practical-07-Alex-Merrill/src/components/IndexBar.js"],"names":["useEffect","useState","PropTypes","Sections","Titles","IndexBar","select","currentArticle","section","setSection","sections","setSections","titles","setTitles","title","charAt","toUpperCase","length","getSections","fetch","process","env","NEXT_PUBLIC_HOSTNAME","response","ok","Error","statusText","json","data","getTitles","console","log","Message","TitleRegion","includes","updateArticle","e","getFullArt","art","id","fullArt","propTypes","func","isRequired","object"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Sections from '../components/Sections';\nimport Titles from '../components/Titles';\n\n/*\n  IndexBar.js\n\n  This component provides the section and title display that allows the user to \n  browse the available articles and select one for display. \n*/\n\nexport default function IndexBar({ select, currentArticle }) {\n  // create state to keep track of current selected section\n  const [section, setSection] = useState();\n  const [sections, setSections] = useState([]);\n  const [titles, setTitles] = useState([]);\n\n  // watches for currentArticle change to update section displayed\n  useEffect(() => {\n    if(currentArticle) {\n      setSection(currentArticle.title.charAt(0).toUpperCase());\n    } else if (!currentArticle && titles.length === 1) {\n      setSection();\n    }\n  }, [currentArticle]);\n\n  // gets list of sections to display\n  useEffect(() => {\n    const getSections = async () => {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/sections`);\n  \n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n  \n      const data = await response.json();\n      setSections(data);\n    };\n    getSections();\n  },[currentArticle]);\n\n  // gets list of titles to display\n  useEffect(() => {\n    const getTitles = async () => {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/titles/${section}`);\n\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n  \n      const data = await response.json();\n      setTitles(data);\n    };\n    console.log(\"section: \" + section);\n    if(section) {\n      console.log(\"Section: \" + section);\n      getTitles();\n    }\n  }, [section, currentArticle]);\n\n  // creates Message component to display message if section hasn't been selected.\n  const Message = function Message() {\n    return (<main><p>Please select a section to view articles.</p></main>);\n  };\n\n  // defines TitleRegion component based on section state\n  const TitleRegion = (section && sections.includes(section)) ? Titles : Message;\n  \n  // callback to Titles component, updates currentArticle when an article is clicked\n  const updateArticle = (e) => {\n    const getFullArt = async (art) => {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/articles/${art.id}`);\n  \n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      \n      const fullArt = await response.json();\n      select(fullArt);\n    };\n    getFullArt(e);\n  }\n\n  // returns structured DOM\n  return (\n    <div>\n      <Sections sections={sections} setSection={setSection} select={select} />\n      <TitleRegion articles={titles} updateArticle={updateArticle} section={section}/>\n    </div>\n  );\n  \n}\n\nIndexBar.propTypes = {\n  select: PropTypes.func.isRequired,\n  currentArticle: PropTypes.object\n};\n"]},"metadata":{},"sourceType":"module"}