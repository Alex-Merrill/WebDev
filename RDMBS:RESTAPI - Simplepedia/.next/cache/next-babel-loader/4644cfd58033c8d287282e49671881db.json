{"ast":null,"code":"var _jsxFileName = \"/Users/alexmerrill/Desktop/Middlebury/20-21/SWD/Practicals/practical-07-Alex-Merrill/src/components/IndexBar.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Sections from '../components/Sections';\nimport Titles from '../components/Titles';\n/*\n  IndexBar.js\n\n  This component provides the section and title display that allows the user to \n  browse the available articles and select one for display. \n*/\n\nexport default function IndexBar({\n  select,\n  currentArticle\n}) {\n  // create state to keep track of current selected section\n  const {\n    0: section,\n    1: setSection\n  } = useState();\n  const {\n    0: sections,\n    1: setSections\n  } = useState([]);\n  const {\n    0: titles,\n    1: setTitles\n  } = useState([]); // watches for currentArticle change to update section displayed\n\n  useEffect(() => {\n    if (currentArticle) {\n      setSection(currentArticle.title.charAt(0).toUpperCase());\n    } else if (!currentArticle && titles.length === 1) {\n      setSection();\n    }\n  }, [currentArticle]); // gets list of sections to display\n\n  useEffect(() => {\n    const getSections = async () => {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/sections`);\n\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      const data = await response.json();\n      setSections(data);\n    };\n\n    getSections();\n  }, [currentArticle]); // gets list of titles to display\n\n  useEffect(() => {\n    const getTitles = async () => {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/titles/${section}`);\n\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      const data = await response.json();\n      setTitles(data);\n    };\n\n    console.log(\"section: \" + section);\n\n    if (section) {\n      console.log(\"Section: \" + section);\n      getTitles();\n    }\n  }, [section, currentArticle]); // creates Message component to display message if section hasn't been selected.\n\n  const Message = function Message() {\n    return __jsx(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 19\n      }\n    }, \"Please select a section to view articles.\"));\n  }; // defines TitleRegion component based on section state\n\n\n  const TitleRegion = section && sections.includes(section) ? Titles : Message; // callback to Titles component, updates currentArticle when an article is clicked\n\n  const updateArticle = e => {\n    const getFullArt = async art => {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/articles/${art.id}`);\n\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      const fullArt = await response.json();\n      select(fullArt);\n    };\n\n    getFullArt(e);\n  }; // returns structured DOM\n\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, __jsx(Sections, {\n    sections: sections,\n    setSection: setSection,\n    select: select,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), __jsx(TitleRegion, {\n    articles: titles,\n    updateArticle: updateArticle,\n    section: section,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }));\n}\nIndexBar.propTypes = {\n  select: PropTypes.func.isRequired,\n  currentArticle: PropTypes.object\n};","map":{"version":3,"sources":["/Users/alexmerrill/Desktop/Middlebury/20-21/SWD/Practicals/practical-07-Alex-Merrill/src/components/IndexBar.js"],"names":["useEffect","useState","PropTypes","Sections","Titles","IndexBar","select","currentArticle","section","setSection","sections","setSections","titles","setTitles","title","charAt","toUpperCase","length","getSections","response","fetch","process","env","NEXT_PUBLIC_HOSTNAME","ok","Error","statusText","data","json","getTitles","console","log","Message","TitleRegion","includes","updateArticle","e","getFullArt","art","id","fullArt","propTypes","func","isRequired","object"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Sections from '../components/Sections';\nimport Titles from '../components/Titles';\n\n/*\n  IndexBar.js\n\n  This component provides the section and title display that allows the user to \n  browse the available articles and select one for display. \n*/\n\nexport default function IndexBar({ select, currentArticle }) {\n  // create state to keep track of current selected section\n  const [section, setSection] = useState();\n  const [sections, setSections] = useState([]);\n  const [titles, setTitles] = useState([]);\n\n  // watches for currentArticle change to update section displayed\n  useEffect(() => {\n    if(currentArticle) {\n      setSection(currentArticle.title.charAt(0).toUpperCase());\n    } else if (!currentArticle && titles.length === 1) {\n      setSection();\n    }\n  }, [currentArticle]);\n\n  // gets list of sections to display\n  useEffect(() => {\n    const getSections = async () => {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/sections`);\n  \n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n  \n      const data = await response.json();\n      setSections(data);\n    };\n    getSections();\n  },[currentArticle]);\n\n  // gets list of titles to display\n  useEffect(() => {\n    const getTitles = async () => {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/titles/${section}`);\n\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n  \n      const data = await response.json();\n      setTitles(data);\n    };\n    console.log(\"section: \" + section);\n    if(section) {\n      console.log(\"Section: \" + section);\n      getTitles();\n    }\n  }, [section, currentArticle]);\n\n  // creates Message component to display message if section hasn't been selected.\n  const Message = function Message() {\n    return (<main><p>Please select a section to view articles.</p></main>);\n  };\n\n  // defines TitleRegion component based on section state\n  const TitleRegion = (section && sections.includes(section)) ? Titles : Message;\n  \n  // callback to Titles component, updates currentArticle when an article is clicked\n  const updateArticle = (e) => {\n    const getFullArt = async (art) => {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/articles/${art.id}`);\n  \n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      \n      const fullArt = await response.json();\n      select(fullArt);\n    };\n    getFullArt(e);\n  }\n\n  // returns structured DOM\n  return (\n    <div>\n      <Sections sections={sections} setSection={setSection} select={select} />\n      <TitleRegion articles={titles} updateArticle={updateArticle} section={section}/>\n    </div>\n  );\n  \n}\n\nIndexBar.propTypes = {\n  select: PropTypes.func.isRequired,\n  currentArticle: PropTypes.object\n};\n"]},"metadata":{},"sourceType":"module"}