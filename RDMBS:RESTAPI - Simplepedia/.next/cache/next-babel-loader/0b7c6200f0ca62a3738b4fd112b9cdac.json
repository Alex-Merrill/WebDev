{"ast":null,"code":"var _jsxFileName = \"/Users/alexmerrill/Desktop/Middlebury/20-21/SWD/Practicals/practical-07-Alex-Merrill/src/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport styles from '../styles/Home.module.css';\nimport IndexBar from '../components/IndexBar';\nimport Article from '../components/Article';\nimport ButtonBar from '../components/ButtonBar';\nimport Editor from '../components/Editor';\nexport default function Home() {\n  // defines states\n  const {\n    0: collection,\n    1: setCollection\n  } = useState([]);\n  const {\n    0: currentArticle,\n    1: select\n  } = useState();\n  const {\n    0: view,\n    1: setView\n  } = useState(\"art\"); // fetch data from basin api\n\n  useEffect(() => {\n    const getData = async () => {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/articles`);\n\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      const data = await response.json();\n      setCollection(data);\n    };\n\n    getData();\n  }, []); // creates Blank component so nothing is rendered if article isn't selected\n\n  const Blank = function Blank() {\n    return __jsx(React.Fragment, null);\n  }; // defines ArtRegion component based on article state\n\n\n  const ArtRegion = currentArticle ? Article : Blank; // defines handleClick\n\n  const handleClick = function handleClick(str) {\n    if (str === \"add\") {\n      setView(\"add\");\n    } else if (str === \"edit\") {\n      setView(\"edit\");\n    } else if (str === \"delete\") {\n      const delArt = async () => {\n        const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/articles/${currentArticle.id}`, {\n          method: 'DELETE'\n        });\n\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n\n        const newColl = collection.filter(e => {\n          return e !== currentArticle;\n        });\n        setCollection(newColl);\n        select();\n      };\n\n      delArt();\n      setView(\"art\");\n    }\n  }; // defines complete\n  // handles view changing and adding new articles\n\n\n  const complete = function complete(art) {\n    if (art === undefined) {\n      setView('art');\n    } else {\n      if (view === 'edit') {\n        const editArt = async () => {\n          const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/articles/${art.id}`, {\n            method: 'PUT',\n            body: JSON.stringify(art),\n            headers: new Headers({\n              'Content-type': 'application/json'\n            })\n          });\n\n          if (!response.ok) {\n            throw new Error(response.statusText);\n          }\n\n          const newColl = collection.map(article => {\n            if (article.id === art.id) {\n              return art;\n            }\n\n            return article;\n          });\n          setCollection(newColl);\n          select(art);\n        };\n\n        editArt();\n      } else {\n        const addArt = async () => {\n          const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/articles`, {\n            method: 'POST',\n            body: JSON.stringify(art),\n            headers: new Headers({\n              'Content-type': 'application/json'\n            })\n          });\n\n          if (!response.ok) {\n            throw new Error(response.statusText);\n          }\n\n          const newArt = await response.json();\n          const newColl = [...collection, newArt];\n          setCollection(newColl);\n          select(newArt);\n        };\n\n        addArt();\n      }\n\n      setView('art');\n    }\n  }; // determines what to display\n\n\n  let content;\n\n  if (view === 'add') {\n    content = __jsx(Editor, {\n      complete: complete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 16\n      }\n    });\n  } else if (view === 'edit' && currentArticle) {\n    const article = currentArticle;\n    content = __jsx(Editor, {\n      complete: complete,\n      article: article,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 16\n      }\n    });\n  } else {\n    content = __jsx(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }, __jsx(IndexBar, {\n      collection: collection,\n      select: select,\n      currentArticle: currentArticle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }), __jsx(ArtRegion, {\n      article: currentArticle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }), __jsx(ButtonBar, {\n      handleClick: handleClick,\n      allowEdit: currentArticle ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }));\n  } // returns structured DOM\n\n\n  return __jsx(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, \"Simplepedia\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  })), __jsx(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, \"Simplepedia\"), content));\n}","map":{"version":3,"sources":["/Users/alexmerrill/Desktop/Middlebury/20-21/SWD/Practicals/practical-07-Alex-Merrill/src/pages/index.js"],"names":["React","useState","useEffect","Head","styles","IndexBar","Article","ButtonBar","Editor","Home","collection","setCollection","currentArticle","select","view","setView","getData","response","fetch","process","env","NEXT_PUBLIC_HOSTNAME","ok","Error","statusText","data","json","Blank","ArtRegion","handleClick","str","delArt","id","method","newColl","filter","e","complete","art","undefined","editArt","body","JSON","stringify","headers","Headers","map","article","addArt","newArt","content","container"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Head from 'next/head';\n\nimport styles from '../styles/Home.module.css';\n\nimport IndexBar from '../components/IndexBar';\nimport Article from '../components/Article';\nimport ButtonBar from '../components/ButtonBar';\nimport Editor from '../components/Editor';\n\nexport default function Home() {\n  // defines states\n  const [collection, setCollection] = useState([]);\n  const [currentArticle, select] = useState();\n  const [view, setView] = useState(\"art\");\n  \n  // fetch data from basin api\n  useEffect(() => {\n    const getData = async () => {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/articles`);\n  \n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n  \n      const data = await response.json();\n      setCollection(data);\n    };\n    getData();\n  }, []);\n  \n    \n  // creates Blank component so nothing is rendered if article isn't selected\n  const Blank = function Blank() {\n    return <></>;\n  }\n\n  // defines ArtRegion component based on article state\n  const ArtRegion = currentArticle ? Article : Blank;\n\n  // defines handleClick\n  const handleClick = function handleClick(str) {\n    if (str === \"add\") {\n      setView(\"add\");\n    } else if(str === \"edit\") {\n      setView(\"edit\");\n    } else if(str === \"delete\") {\n      const delArt = async () => {\n        const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/articles/${currentArticle.id}`, {\n          method: 'DELETE'\n        });\n\n        if(!response.ok) {\n          throw new Error(response.statusText);\n        }\n\n        const newColl = collection.filter((e) => {\n          return e !== currentArticle;\n        });\n        setCollection(newColl);\n        select();\n      };\n      delArt();\n      setView(\"art\");\n    }\n  };\n\n  // defines complete\n  // handles view changing and adding new articles\n  const complete = function complete(art) {\n    if(art === undefined) {\n      setView('art');\n    } else {\n      if(view === 'edit') {\n        const editArt = async () => {\n          const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/articles/${art.id}`, {\n            method: 'PUT',\n            body: JSON.stringify(art),\n            headers: new Headers({ 'Content-type': 'application/json'}),\n          });\n\n          if (!response.ok) {\n            throw new Error(response.statusText);\n          }\n\n          const newColl = collection.map((article) => {\n            if(article.id === art.id) {\n              return art;\n            }\n            return article;\n          });\n          setCollection(newColl);\n          select(art);\n        };\n        editArt();\n      } else {\n        const addArt = async () => {\n          const response = await fetch(`${process.env.NEXT_PUBLIC_HOSTNAME}api/articles`, {\n            method: 'POST',\n            body: JSON.stringify(art),\n            headers: new Headers({ 'Content-type': 'application/json'}),\n          });\n\n          if (!response.ok) {\n            throw new Error(response.statusText);\n          }\n\n          const newArt = await response.json();\n\n          const newColl = [...collection, newArt];\n          setCollection(newColl);\n          select(newArt);\n        };\n        addArt();\n      }\n      setView('art');\n    }\n  };\n\n  // determines what to display\n  let content;\n  if (view === 'add') { \n    content = (<Editor complete={complete} />);\n  } else if(view === 'edit' && currentArticle) {\n    const article = currentArticle;\n    content = (<Editor complete={complete} article={article} />);\n  } else {\n    content = (\n      <main>\n        <IndexBar collection={collection} select={select} currentArticle={currentArticle} />\n        <ArtRegion article={currentArticle} />\n        <ButtonBar handleClick={handleClick} allowEdit={currentArticle ? true : false}/>\n      </main>\n    );\n  }\n  \n  // returns structured DOM\n  return (\n    <div className={styles.container}>\n      <Head>\n        <title>Simplepedia</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <main>\n        <h1 className=\"title\">Simplepedia</h1>\n        {content}  \n      </main>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}