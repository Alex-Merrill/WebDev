{"ast":null,"code":"/*\n\n  backend-utils.js\n\n  This is a collection of utility functions to be called on the server backend. These functions\n  interact directly with the database.\n\n  available functions:\n\n  getArticles - reads all of the articles out of the DB and returns them sorted by title\n  deleteArticle(id) - delete the article associated with the given id\n  updateArticle(article) - update the data store with changes in `article`\n  addArticle(article) - add the new `article` to the data store \n*/\nimport knexConfig from '../../knexfile';\nimport knexInitializer from 'knex';\nexport const knex = knexInitializer(knexConfig[process.env.TESTING || \"development\" || 'development']);\nimport { Model } from 'objection';\nimport Article from '../../models/Article';\nModel.knex(knex);\n/**\n * Find all articles and sort them by title\n *\n * returns list of articles sorted by title\n */\n\nexport async function getArticles() {\n  const articles = await Article.query();\n  return articles;\n}\n/**\n * Remove the article associated with the provided id from the data storage\n *\n * @param {number} id\n * returns the number of articles deleted\n */\n\nexport async function deleteArticle(id) {\n  const numDeleted = await Article.query().deleteById(id);\n  return numDeleted;\n}\n/**\n * Update the data store with the provided article object\n *\n * @param {object} article\n * returns the number of articles updated\n */\n\nexport async function updateArticle(article) {\n  const numUpdated = await Article.query().patch(article).where('id', article.id);\n  return numUpdated;\n}\n/**\n * Add a new article to the data store\n *\n * @param {number} article\n * returns the article with a new id attached\n */\n\nexport async function addArticle(article) {\n  const newArticle = await Article.query().insertAndFetch(article);\n  return newArticle;\n}","map":{"version":3,"sources":["/Users/alexmerrill/Desktop/Middlebury/20-21/SWD/Web Dev/RDMBS/src/lib/backend-utils.js"],"names":["knexConfig","knexInitializer","knex","process","env","TESTING","Model","Article","getArticles","articles","query","deleteArticle","id","numDeleted","deleteById","updateArticle","article","numUpdated","patch","where","addArticle","newArticle","insertAndFetch"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,UAAP,MAAuB,gBAAvB;AACA,OAAOC,eAAP,MAA4B,MAA5B;AACA,OAAO,MAAMC,IAAI,GAAGD,eAAe,CACjCD,UAAU,CAACG,OAAO,CAACC,GAAR,CAAYC,OAAZ,qBAA+C,aAAhD,CADuB,CAA5B;AAIP,SAASC,KAAT,QAAsB,WAAtB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACAD,KAAK,CAACJ,IAAN,CAAWA,IAAX;AAGA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeM,WAAf,GAA6B;AAClC,QAAMC,QAAQ,GAAG,MAAMF,OAAO,CAACG,KAAR,EAAvB;AACA,SAAOD,QAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeE,aAAf,CAA6BC,EAA7B,EAAiC;AACtC,QAAMC,UAAU,GAAG,MAAMN,OAAO,CAACG,KAAR,GACtBI,UADsB,CACXF,EADW,CAAzB;AAEA,SAAOC,UAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeE,aAAf,CAA6BC,OAA7B,EAAsC;AAC3C,QAAMC,UAAU,GAAG,MAAMV,OAAO,CAACG,KAAR,GACtBQ,KADsB,CAChBF,OADgB,EAEtBG,KAFsB,CAEhB,IAFgB,EAEVH,OAAO,CAACJ,EAFE,CAAzB;AAGE,SAAOK,UAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeG,UAAf,CAA0BJ,OAA1B,EAAmC;AACxC,QAAMK,UAAU,GAAG,MAAMd,OAAO,CAACG,KAAR,GACtBY,cADsB,CACPN,OADO,CAAzB;AAEA,SAAOK,UAAP;AACD","sourcesContent":["/*\n\n  backend-utils.js\n\n  This is a collection of utility functions to be called on the server backend. These functions\n  interact directly with the database.\n\n  available functions:\n\n  getArticles - reads all of the articles out of the DB and returns them sorted by title\n  deleteArticle(id) - delete the article associated with the given id\n  updateArticle(article) - update the data store with changes in `article`\n  addArticle(article) - add the new `article` to the data store \n*/\n\nimport knexConfig from '../../knexfile';\nimport knexInitializer from 'knex';\nexport const knex = knexInitializer(\n  knexConfig[process.env.TESTING || process.env.NODE_ENV || 'development']\n);\n\nimport { Model } from 'objection';\nimport Article from '../../models/Article';\nModel.knex(knex);\n\n\n/**\n * Find all articles and sort them by title\n *\n * returns list of articles sorted by title\n */\nexport async function getArticles() {\n  const articles = await Article.query();\n  return articles;\n}\n\n\n/**\n * Remove the article associated with the provided id from the data storage\n *\n * @param {number} id\n * returns the number of articles deleted\n */\nexport async function deleteArticle(id) {\n  const numDeleted = await Article.query()\n    .deleteById(id);\n  return numDeleted;\n}\n\n/**\n * Update the data store with the provided article object\n *\n * @param {object} article\n * returns the number of articles updated\n */\nexport async function updateArticle(article) {\n  const numUpdated = await Article.query()\n    .patch(article)\n    .where('id', article.id);\n    return numUpdated;\n}\n\n/**\n * Add a new article to the data store\n *\n * @param {number} article\n * returns the article with a new id attached\n */\nexport async function addArticle(article) {\n  const newArticle = await Article.query()\n    .insertAndFetch(article);\n  return newArticle;\n}\n"]},"metadata":{},"sourceType":"module"}